name: Unit Tests & Coding Standards
on:
    pull_request:
    push:
        branches:
            - main
            - develop
    # Allow manually triggering the workflow.
    workflow_dispatch:

# Cancels all previous workflow runs for pull requests that have not completed.
concurrency:
    # The concurrency group contains the workflow name and the branch name for pull requests
    # or the commit hash for any other events.
    group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
    cancel-in-progress: true

jobs:
    phpcs:
        name: PHP coding standards
        runs-on: ubuntu-latest
        timeout-minutes: 20

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: '8.3'
                  coverage: none
                  tools: cs2pr

            # Since Composer dependencies are installed using `composer update` and no lock file is in version control,
            # passing a custom cache suffix ensures that the cache is flushed at least once per week.
            - name: Install Composer dependencies
              uses: ramsey/composer-install@v3

            - name: Make Composer packages available globally
              run: echo "${PWD}/vendor/bin" >> $GITHUB_PATH

            - name: Run PHPCS Wordpress Coding Standards
              id: phpcs
              run: phpcs --standard=WordPress src

    tests:
        name: Integration Tests
        runs-on: ubuntu-latest
        timeout-minutes: 20

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Install node dependencies
              run: npm ci

            - name: Set up PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: '8.3'
                  ini-file: development
                  coverage: none

            # Ensure that Composer installs the correct versions of packages.
            - name: Override PHP version in composer.json
              run: composer config platform.php 8.3

            # Since Composer dependencies are installed using `composer update` and no lock file is in version control,
            # passing a custom cache suffix ensures that the cache is flushed at least once per week.
            - name: Install Composer dependencies
              uses: ramsey/composer-install@v3

            - name: Docker debug information
              run: |
                  docker -v

            - name: General debug information
              run: |
                  npm --version
                  node --version
                  curl --version
                  git --version
                  locale -a

            - name: Start Docker environment
              run: npm run wp-env start

            - name: Log running Docker containers
              run: docker ps -a

            - name: Docker container debug information
              run: |
                  npm run wp-env run tests-mysql mysql -- --version
                  npm run wp-env run tests-wordpress php -- --version
                  npm run wp-env run tests-wordpress php -m
                  npm run wp-env run tests-wordpress php -i
                  npm run wp-env run tests-wordpress /var/www/html/wp-content/plugins/gutenberg/vendor/bin/phpunit -- --version
                  npm run wp-env run tests-wordpress locale -a
                  npm run wp-env run tests-cli wp core version

            - name: Running Unit Tests
              run: |
                  npm run wp-env start
                  npm run tests


            # Verifies that PHPUnit actually runs in the first place. We want visibility
            # into issues which can cause it to fail silently, so we check the output
            # to verify that at least 500 tests have passed. This is an arbitrary
            # number, but makes sure a drastic change doesn't happen without us noticing.
            - name: Check number of passed tests
              run: |
                  # Note: relies on PHPUnit execution to fail on test failure.
                  # Extract the number of executed tests from the log file.
                  if ! num_tests=$(grep -Eo 'OK \([0-9]+ tests' phpunit.log) ; then
                    if ! num_tests=$(grep -Eo 'Tests: [0-9]+, Assertions:' phpunit.log) ; then
                      echo "PHPUnit failed or did not run. Check the PHPUnit output in the previous step to debug." && exit 1
                    fi
                  fi
                  # Extract just the number of tests from the string.
                  num_tests=$(echo "$num_tests" | grep -Eo '[0-9]+')
                  if [ $num_tests -lt 500 ] ; then
                    echo "Only $num_tests tests passed, which is much fewer than expected." && exit 1
                  fi
                  echo "$num_tests tests passed."